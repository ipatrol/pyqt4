// qnetworkaccessmanager.sip generated by MetaSIP on Wed Apr 27 03:46:16 2011
//
// This file is part of the QtNetwork Python extension module.
//
// Copyright (c) 2011 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// Please review the following information to ensure GNU General
// Public Licensing requirements will be met:
// http://trolltech.com/products/qt/licenses/licensing/opensource/. If
// you are unsure which license is appropriate for your use, please
// review the following information:
// http://trolltech.com/products/qt/licenses/licensing/licensingoverview
// or contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt_4_4_0 -)

class QNetworkAccessManager : QObject
{
%TypeHeaderCode
#include <qnetworkaccessmanager.h>
%End

public:
    enum Operation
    {
        HeadOperation,
        GetOperation,
        PutOperation,
        PostOperation,
%If (Qt_4_6_0 -)
        DeleteOperation,
%End
%If (Qt_4_7_0 -)
        CustomOperation,
%End
    };

    explicit QNetworkAccessManager(QObject *parent /TransferThis/ = 0);
    virtual ~QNetworkAccessManager();
    QNetworkProxy proxy() const;
    void setProxy(const QNetworkProxy &proxy);
    QNetworkCookieJar *cookieJar() const;
    void setCookieJar(QNetworkCookieJar *cookieJar /Transfer/);
    QNetworkReply *head(const QNetworkRequest &request);
    QNetworkReply *get(const QNetworkRequest &request);
    QNetworkReply *post(const QNetworkRequest &request, QIODevice *data);
    QNetworkReply *post(const QNetworkRequest &request, const QByteArray &data);
    QNetworkReply *put(const QNetworkRequest &request, QIODevice *data);
    QNetworkReply *put(const QNetworkRequest &request, const QByteArray &data);

signals:
    void proxyAuthenticationRequired(const QNetworkProxy &proxy, QAuthenticator *authenticator);
    void authenticationRequired(QNetworkReply *reply, QAuthenticator *authenticator);
    void finished(QNetworkReply *reply);
%If (PyQt_OpenSSL)
    void sslErrors(QNetworkReply *reply, const QList<QSslError> &errors);
%End

protected:
    virtual QNetworkReply *createRequest(QNetworkAccessManager::Operation op, const QNetworkRequest &request, QIODevice *device = 0);

public:
%If (Qt_4_5_0 -)
    QNetworkProxyFactory *proxyFactory() const;
%End
%If (Qt_4_5_0 -)
    void setProxyFactory(QNetworkProxyFactory *factory /Transfer/);
%End
%If (Qt_4_5_0 -)
    QAbstractNetworkCache *cache() const;
%End
%If (Qt_4_5_0 -)
    void setCache(QAbstractNetworkCache *cache /Transfer/);
%End
%If (Qt_4_6_0 -)
    QNetworkReply *deleteResource(const QNetworkRequest &request);
%End
%If (Qt_4_7_0 -)

    enum NetworkAccessibility
    {
        UnknownAccessibility,
        NotAccessible,
        Accessible,
    };

%End
%If (Qt_4_7_0 -)
    QNetworkReply *sendCustomRequest(const QNetworkRequest &request, const QByteArray &verb, QIODevice *data = 0);
%End
%If (Qt_4_7_0 -)
    void setConfiguration(const QNetworkConfiguration &config);
%End
%If (Qt_4_7_0 -)
    QNetworkConfiguration configuration() const;
%End
%If (Qt_4_7_0 -)
    QNetworkConfiguration activeConfiguration() const;
%End
%If (Qt_4_7_0 -)
    void setNetworkAccessible(QNetworkAccessManager::NetworkAccessibility accessible);
%End
%If (Qt_4_7_0 -)
    QNetworkAccessManager::NetworkAccessibility networkAccessible() const;
%End

protected:
%If (Qt_4_7_0 -)
    void networkAccessibleChanged(QNetworkAccessManager::NetworkAccessibility accessible);
%End
};

%End
