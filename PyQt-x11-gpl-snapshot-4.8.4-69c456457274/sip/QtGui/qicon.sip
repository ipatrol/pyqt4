// qicon.sip generated by MetaSIP on Wed Apr 27 03:46:15 2011
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2011 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// Please review the following information to ensure GNU General
// Public Licensing requirements will be met:
// http://trolltech.com/products/qt/licenses/licensing/opensource/. If
// you are unsure which license is appropriate for your use, please
// review the following information:
// http://trolltech.com/products/qt/licenses/licensing/licensingoverview
// or contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%ModuleCode
#include <qicon.h>
%End

class QIcon /Supertype=sip.wrapper/
{
%TypeHeaderCode
#include <qicon.h>
%End

public:
    enum Mode
    {
        Normal,
        Disabled,
        Active,
%If (Qt_4_2_0 -)
        Selected,
%End
    };

    enum State
    {
        On,
        Off,
    };

    QIcon();
    QIcon(const QPixmap &pixmap);
    QIcon(const QIcon &other);
    explicit QIcon(const QString &fileName);
    explicit QIcon(QIconEngine *engine /Transfer/);
%If (Qt_4_3_0 -)
    explicit QIcon(QIconEngineV2 *engine /Transfer/);
%End
    QIcon(const QVariant &variant) /NoDerived/;
%MethodCode
        sipCpp = new QIcon(qVariantValue<QIcon>(*a0));
%End

    ~QIcon();
    QPixmap pixmap(const QSize &size, QIcon::Mode mode = QIcon::Normal, QIcon::State state = QIcon::Off) const;
    QPixmap pixmap(int w, int h, QIcon::Mode mode = QIcon::Normal, QIcon::State state = QIcon::Off) const;
    QPixmap pixmap(int extent, QIcon::Mode mode = QIcon::Normal, QIcon::State state = QIcon::Off) const;
    QSize actualSize(const QSize &size, QIcon::Mode mode = QIcon::Normal, QIcon::State state = QIcon::Off) const;
%If (Qt_4_5_0 -)
    QList<QSize> availableSizes(QIcon::Mode mode = QIcon::Normal, QIcon::State state = QIcon::Off) const;
%End
    void paint(QPainter *painter, const QRect &rect, Qt::Alignment alignment = Qt::AlignCenter, QIcon::Mode mode = QIcon::Normal, QIcon::State state = QIcon::Off) const;
    void paint(QPainter *painter, int x, int y, int w, int h, Qt::Alignment alignment = Qt::AlignCenter, QIcon::Mode mode = QIcon::Normal, QIcon::State state = QIcon::Off) const;
    bool isNull() const;
    bool isDetached() const;
    int serialNumber() const;
    void addPixmap(const QPixmap &pixmap, QIcon::Mode mode = QIcon::Normal, QIcon::State state = QIcon::Off);
    void addFile(const QString &fileName, const QSize &size = QSize(), QIcon::Mode mode = QIcon::Normal, QIcon::State state = QIcon::Off);
%If (Qt_4_3_0 -)
    qint64 cacheKey() const;
%End
%If (Qt_4_6_0 -)
    static QIcon fromTheme(const QString &name, const QIcon &fallback = QIcon());
%End
%If (Qt_4_6_0 -)
    static bool hasThemeIcon(const QString &name);
%End
%If (Qt_4_6_0 -)
    static QStringList themeSearchPaths();
%End
%If (Qt_4_6_0 -)
    static void setThemeSearchPaths(const QStringList &searchpath);
%End
%If (Qt_4_6_0 -)
    static QString themeName();
%End
%If (Qt_4_6_0 -)
    static void setThemeName(const QString &path);
%End
%If (Qt_4_7_0 -)
    QString name() const;
%End
};

%If (Qt_4_2_0 -)
QDataStream &operator<<(QDataStream &, const QIcon & /Constrained/);
%End
%If (Qt_4_2_0 -)
QDataStream &operator>>(QDataStream &, QIcon & /Constrained/);
%End
%If (Qt_4_3_0 -)
void qSwap(QIcon &value1, QIcon &value2);
%End
