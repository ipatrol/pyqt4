// qstatemachine.sip generated by MetaSIP on Wed Apr 27 03:46:15 2011
//
// This file is part of the QtCore Python extension module.
//
// Copyright (c) 2011 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// Please review the following information to ensure GNU General
// Public Licensing requirements will be met:
// http://trolltech.com/products/qt/licenses/licensing/opensource/. If
// you are unsure which license is appropriate for your use, please
// review the following information:
// http://trolltech.com/products/qt/licenses/licensing/licensingoverview
// or contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt_4_6_0 -)

class QStateMachine : QState
{
%TypeHeaderCode
#include <qstatemachine.h>
%End

public:
    class SignalEvent : QEvent /NoDefaultCtors/
    {
%TypeHeaderCode
#include <qstatemachine.h>
%End

    public:
        virtual ~SignalEvent();
        QObject *sender() const;
        int signalIndex() const;
        QList<QVariant> arguments() const;
    };

    class WrappedEvent : QEvent /NoDefaultCtors/
    {
%TypeHeaderCode
#include <qstatemachine.h>
%End

    public:
        virtual ~WrappedEvent();
        QObject *object() const;
        QEvent *event() const;
    };

    enum EventPriority
    {
        NormalPriority,
        HighPriority,
    };

    enum RestorePolicy
    {
        DontRestoreProperties,
        RestoreProperties,
    };

    enum Error
    {
        NoError,
        NoInitialStateError,
        NoDefaultStateInHistoryStateError,
        NoCommonAncestorForTransitionError,
    };

    QStateMachine(QObject *parent /TransferThis/ = 0);
    virtual ~QStateMachine();
    void addState(QAbstractState *state /Transfer/);
    void removeState(QAbstractState *state /TransferBack/);
    QStateMachine::Error error() const;
    QString errorString() const;
    void clearError();
    bool isRunning() const;
    bool isAnimated() const;
    void setAnimated(bool enabled);
    void addDefaultAnimation(QAbstractAnimation *animation);
    QList<QAbstractAnimation*> defaultAnimations() const;
    void removeDefaultAnimation(QAbstractAnimation *animation);
    QStateMachine::RestorePolicy globalRestorePolicy() const;
    void setGlobalRestorePolicy(QStateMachine::RestorePolicy restorePolicy);
    void postEvent(QEvent *event /Transfer/, QStateMachine::EventPriority priority = QStateMachine::NormalPriority);
    int postDelayedEvent(QEvent *event /Transfer/, int delay);
    bool cancelDelayedEvent(int id);
    QSet<QAbstractState*> configuration() const;
    virtual bool eventFilter(QObject *watched, QEvent *event);

public slots:
    void start();
    void stop();

signals:
    void started();
    void stopped();

protected:
    virtual void onEntry(QEvent *event);
    virtual void onExit(QEvent *event);
    virtual bool event(QEvent *e);

private:
    QStateMachine(const QStateMachine &);
};

%End
