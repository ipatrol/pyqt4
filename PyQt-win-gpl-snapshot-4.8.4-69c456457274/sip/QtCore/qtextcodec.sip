// qtextcodec.sip generated by MetaSIP on Wed Apr 27 03:42:15 2011
//
// This file is part of the QtCore Python extension module.
//
// Copyright (c) 2011 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// Please review the following information to ensure GNU General
// Public Licensing requirements will be met:
// http://trolltech.com/products/qt/licenses/licensing/opensource/. If
// you are unsure which license is appropriate for your use, please
// review the following information:
// http://trolltech.com/products/qt/licenses/licensing/licensingoverview
// or contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%ModuleCode
#include <qtextcodec.h>
%End

class QTextCodec /Abstract,Supertype=sip.wrapper/
{
%TypeHeaderCode
#include <qtextcodec.h>
%End

public:
    static QTextCodec *codecForName(const QByteArray &name);
    static QTextCodec *codecForName(const char *name);
    static QTextCodec *codecForMib(int mib);
    static QTextCodec *codecForHtml(const QByteArray &ba);
%If (Qt_4_4_0 -)
    static QTextCodec *codecForHtml(const QByteArray &ba, QTextCodec *defaultCodec);
%End
%If (Qt_4_6_0 -)
    static QTextCodec *codecForUtfText(const QByteArray &ba);
%End
%If (Qt_4_6_0 -)
    static QTextCodec *codecForUtfText(const QByteArray &ba, QTextCodec *defaultCodec);
%End
    static QList<QByteArray> availableCodecs();
    static QList<int> availableMibs();
    static QTextCodec *codecForLocale();
    static void setCodecForLocale(QTextCodec *c /KeepReference/);
    QTextDecoder *makeDecoder() const /Factory/;
%If (Qt_4_7_0 -)
    QTextDecoder *makeDecoder(QFlags<QTextCodec::ConversionFlag> flags) const /Factory/;
%End
    QTextEncoder *makeEncoder() const /Factory/;
%If (Qt_4_7_0 -)
    QTextEncoder *makeEncoder(QFlags<QTextCodec::ConversionFlag> flags) const /Factory/;
%End
    bool canEncode(const QString &) const;
    QString toUnicode(const QByteArray &) const;
    QString toUnicode(const char *chars /Encoding="None"/) const;
    QByteArray fromUnicode(const QString &uc) const;

    enum ConversionFlag
    {
        DefaultConversion,
        ConvertInvalidToNull,
        IgnoreHeader,
    };

    typedef QFlags<QTextCodec::ConversionFlag> ConversionFlags;

    struct ConverterState
    {
%TypeHeaderCode
#include <qtextcodec.h>
%End

        ConverterState(QFlags<QTextCodec::ConversionFlag> flags = QTextCodec::DefaultConversion);
        ~ConverterState();

    private:
        ConverterState(const QTextCodec::ConverterState &);
    };

    QString toUnicode(const char *in /Array/, int length /ArraySize/, QTextCodec::ConverterState *state = 0) const;
    virtual QByteArray name() const = 0;
    virtual QList<QByteArray> aliases() const;
    virtual int mibEnum() const = 0;

protected:
    virtual QString convertToUnicode(const char *in /Array/, int length /ArraySize/, QTextCodec::ConverterState *state) const = 0;
    QTextCodec() /Transfer/;
    virtual ~QTextCodec();

public:
    static QTextCodec *codecForTr();
    static void setCodecForTr(QTextCodec *c /KeepReference/);
    static QTextCodec *codecForCStrings();
    static void setCodecForCStrings(QTextCodec *c /KeepReference/);

private:
    QTextCodec(const QTextCodec &);
};

QFlags<QTextCodec::ConversionFlag> operator|(QTextCodec::ConversionFlag f1, QFlags<QTextCodec::ConversionFlag> f2);

class QTextEncoder /Supertype=sip.wrapper/
{
%TypeHeaderCode
#include <qtextcodec.h>
%End

public:
    explicit QTextEncoder(const QTextCodec *codec);
%If (Qt_4_7_0 -)
    QTextEncoder(const QTextCodec *codec, QFlags<QTextCodec::ConversionFlag> flags);
%End
    ~QTextEncoder();
    QByteArray fromUnicode(const QString &str);

private:
    QTextEncoder(const QTextEncoder &);
};

class QTextDecoder /Supertype=sip.wrapper/
{
%TypeHeaderCode
#include <qtextcodec.h>
%End

public:
    explicit QTextDecoder(const QTextCodec *codec);
%If (Qt_4_7_0 -)
    QTextDecoder(const QTextCodec *codec, QFlags<QTextCodec::ConversionFlag> flags);
%End
    ~QTextDecoder();
    QString toUnicode(const char *chars /Array/, int len /ArraySize/);
%If (Qt_4_3_0 -)
    void toUnicode(QString *target /Constrained/, const char *chars /Array/, int len /ArraySize/) /API=QString: - 2/;
%End
    QString toUnicode(const QByteArray &ba);

private:
    QTextDecoder(const QTextDecoder &);
};
