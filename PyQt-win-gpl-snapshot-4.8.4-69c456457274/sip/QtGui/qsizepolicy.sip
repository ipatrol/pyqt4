// qsizepolicy.sip generated by MetaSIP on Wed Apr 27 03:42:15 2011
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2011 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// Please review the following information to ensure GNU General
// Public Licensing requirements will be met:
// http://trolltech.com/products/qt/licenses/licensing/opensource/. If
// you are unsure which license is appropriate for your use, please
// review the following information:
// http://trolltech.com/products/qt/licenses/licensing/licensingoverview
// or contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%ModuleCode
#include <qsizepolicy.h>
%End

class QSizePolicy
{
%TypeHeaderCode
#include <qsizepolicy.h>
%End

public:
    enum PolicyFlag
    {
        GrowFlag,
        ExpandFlag,
        ShrinkFlag,
        IgnoreFlag,
    };

    enum Policy
    {
        Fixed,
        Minimum,
        Maximum,
        Preferred,
        MinimumExpanding,
        Expanding,
        Ignored,
    };

    QSizePolicy();
    QSizePolicy(QSizePolicy::Policy horizontal, QSizePolicy::Policy vertical);
    QSizePolicy(const QVariant &variant) /NoDerived/;
%MethodCode
        sipCpp = new QSizePolicy(qVariantValue<QSizePolicy>(*a0));
%End

    QSizePolicy::Policy horizontalPolicy() const;
    QSizePolicy::Policy verticalPolicy() const;
    void setHorizontalPolicy(QSizePolicy::Policy d);
    void setVerticalPolicy(QSizePolicy::Policy d);
    Qt::Orientations expandingDirections() const;
    void setHeightForWidth(bool b);
    bool hasHeightForWidth() const;
    bool operator==(const QSizePolicy &s) const;
    bool operator!=(const QSizePolicy &s) const;
    int horizontalStretch() const;
    int verticalStretch() const;
    void setHorizontalStretch(uint stretchFactor) [void (uchar stretchFactor)];
    void setVerticalStretch(uint stretchFactor) [void (uchar stretchFactor)];
    void transpose();
%If (Qt_4_3_0 -)

    enum ControlType
    {
        DefaultType,
        ButtonBox,
        CheckBox,
        ComboBox,
        Frame,
        GroupBox,
        Label,
        Line,
        LineEdit,
        PushButton,
        RadioButton,
        Slider,
        SpinBox,
        TabWidget,
        ToolButton,
    };

%End
%If (Qt_4_3_0 -)
    typedef QFlags<QSizePolicy::ControlType> ControlTypes;
%End
%If (Qt_4_3_0 -)
    QSizePolicy(QSizePolicy::Policy horizontal, QSizePolicy::Policy vertical, QSizePolicy::ControlType type);
%End
%If (Qt_4_3_0 -)
    QSizePolicy::ControlType controlType() const;
%End
%If (Qt_4_3_0 -)
    void setControlType(QSizePolicy::ControlType type);
%End
};

%If (Qt_4_2_0 -)
QDataStream &operator<<(QDataStream &, const QSizePolicy & /Constrained/);
%End
%If (Qt_4_2_0 -)
QDataStream &operator>>(QDataStream &, QSizePolicy & /Constrained/);
%End
%If (Qt_4_3_0 -)
QFlags<QSizePolicy::ControlType> operator|(QSizePolicy::ControlType f1, QFlags<QSizePolicy::ControlType> f2);
%End
